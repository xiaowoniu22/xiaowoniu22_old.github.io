---
layout: post
title:  "js模块化"
date:   2017-01-10 14:08:07 +0800
categories: jekyll update
tags: [模块化]
---
我也来说说js的模块化
	秉承哲学中认识问题的逻辑思维过程，我从“是什么”，“为什么”，“怎么样（怎么用）”总结了一下js模块化开发。  
	一、是什么  
	谈论一件事物时，要先搞清楚它是什么。  
	1、定义  
	Javascript本身不是一种模块化编程语言，应该说是在ES6之前没有模块功能。  
	模块是实现特定功能的一种方法。简单来说，定义一个函数就是一个模块。像这样：  
	{% highlight ruby %}
	function alertMessage(){
		alert("这是一条提示");
	}
	{% endhighlight %} 
	但是，这样的模块污染了全局变量，所以我们可以这样：
	{% highlight ruby %}
	var alertDialog = {
		message：“这是一条提示”，
		alertMessage: function(){
			alert(this.message);
		}
	};
	{% endhighlight %} 
	但是，这样你又可以通过
	{% highlight ruby %}
	alertDialog.message = "这不是一条提示"；
	{% endhighlight %} 
	将模块的内部属性修改，这不是我们愿意看到的。所以，有了如下方式：
	{% highlight ruby %}
	var alertDialog = (function(){

　　　　var message = “这是一条提示”;

　　　　var alertMessage(){
		alert("这是一条提示");
	   };

　　　　return {
　　　　　　alertMessage : alertMessage
　　　　};

　　})();
   {% endhighlight %}
   如此这般，私有成员就不会暴露出来了。 
   这些都可以称为模块。
   2、性质  
   模块应该具有独立性，如果要在模块内部使用全局变量，需要作为参数传入。
   {% highlight ruby %}
   var alertDialog = (function ($) {

　　　　//...

　　})(jQuery);
   {% endhighlight %}
   这就引出了模块的依赖性。  
   二、为什么  
   既然知道了什么是模块，那么我们为什么要使用模块呢？  
   使用模块可以将项目功能分离，便于维护，方便复用，以及上文说到的避免污染全局变量。  
   三、怎么用   
   	  如果你仅仅是按照上述的方法创建模块，并通过“script”引用模块，你会发现维护起来非常困难：js文件之间存在依赖关系，因此必须严格保证加载顺序，
   依赖性最大的模块一定要放到最后加载。这个时候，你需要你就需要用到模块化了。  
   	  模块化实现两部分功能：  
   1、按需加载（关于这一点，[浅谈模块化加载的实现原理]这篇文章有详细说明。）  
   2、管理模块之间的依赖性，便于代码的编写和维护
   	  既然模块化有使用的必要，所以模块化规范也就产生了，我们使用模块化的时候也要遵守模块化规范。
      终于说到了重点：
      1、CommonJS规范  
      CommonJS是服务器端模块的规范，Node.js采用了这个规范。
 	  {% highlight ruby %}
 	  //dialog.js
      	function alertDialog(){
      		this.alertMessage = function(){
				alert("这是一条提示");
			}
		}
		var alertDialog = new alertDialog();
        exports.alertDialog = alertDialog;
      {% endhighlight %}
      
      {% highlight ruby %}
       	  var dialog = require('./dialog').alertDialog;
	  {% endhighlight %}
	  
	  直接通过require方法引用文件，返回文件的exports对象，这样就可以使用模块暴露出来的公用方法或变量。  
   但是，CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作。像Node.js主要用
   于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是浏览
   器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD和CMD 解决方案。  
  2、AMD(Asynchronous Module Definition)  
  顾名思义，异步模块定义。
  AMD的代表是RequireJS，通过define(id?, dependencies?, factory)来定义模块，require([dependencies], function(){})来调用模块，
  使用提前异步加载依赖模块的方式，模块加载完毕后执行回调函数，这里要好好理解JS的异步机制，不可按同步顺序执行的思维去理解，多个文件异步并行加载，
  哪个先执行完不是你按照加载顺序可预料到的，而是等所有依赖执行完毕，最后一并回调结果。  
  3、CMD
  CMD的代表是SeaJS，与RequireJS定义和加载模块的方式略有不同，同样可以通过define(id?, dependencies?, factory)定义模块，但是SeaJS
  是采用的就近依赖的方式来加载模块，一般不在dependencies里依赖模块，而是统一写法：define(function(require, exports, module){})，
  在factory里就近加载依赖模块，由seajs.use([dependencies],function(mod,[mod]){})来使用模块；本质上也是异步的加载模块，只是和
  RequireJS相比加载和执行的时机不一样罢了。  
  4、AMD和CMD的区别  
  相比来说，Seajs和Requirejs都是很不错的前端模块化组织方案，各有千秋；Requirejs要等到所有前置依赖加载并执行完毕，再回调主要的代码逻辑，
  如果非要说有所欠缺，就得在前置依赖那里做优化了，但大致上是很流畅的；Seajs只是将依赖模块预先加载并不执行，在需要时就近使用，这时就可能也
  许会出现延迟的现象。
	  
	  
	  
	  
	  
   四、ES6的模块化
   五、模块化和组件化
   六、参考资料
   http://famanoder.com/bokes/5867ebf04aee37201fb4d1cb


[浅谈模块化加载的实现原理]: http://caibaojian.com/module-definition.html

https://jdc.jd.com/archives/204
https://segmentfault.com/a/1190000004873947
https://zhuanlan.zhihu.com/p/22890374
http://famanoder.com/bokes/58484c12712c723c0f316dae
http://www.ruanyifeng.com/blog/2012/11/require_js.html
http://lishaopeng.com/2016/02/05/js-module/
http://fex.baidu.com/blog/2014/03/fis-module/#comments

http://caibaojian.com/module-definition.html按需加载